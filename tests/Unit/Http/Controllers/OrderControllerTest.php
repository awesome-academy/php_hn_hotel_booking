<?php

namespace Tests\Unit\Http\Controllers;

use App\Http\Controllers\Partner\OrderController;
use App\Models\Booking;
use App\Models\Notification;
use App\Models\User;
use App\Repositories\Contracts\BookingDetailRepositoryInterface;
use App\Repositories\Contracts\HotelRepositoryInterface;
use App\Repositories\Contracts\NotificationRepositoryInterface;
use App\Repositories\Contracts\UserRepositoryInterface;
use App\Repositories\Eloquents\BookingRepository;
use Illuminate\Http\Request;
use Tests\TestCase;
use Mockery as m;

class OrderControllerTest extends TestCase
{
    protected $hotelMock;
    protected $bookingMock;
    protected $bookingDetailMock;
    protected $notificationMock;
    protected $orderController;
    protected $userMock;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->hotelMock = m::mock(HotelRepositoryInterface::class);
        $this->bookingMock = m::mock(BookingRepository::class);
        $this->bookingDetailMock = m::mock(BookingDetailRepositoryInterface::class);
        $this->notificationMock = m::mock(NotificationRepositoryInterface::class);
        $this->userMock = m::mock(UserRepositoryInterface::class);
        $this->orderController = new OrderController(
            $this->hotelMock,
            $this->bookingMock,
            $this->bookingDetailMock,
            $this->notificationMock,
            $this->userMock
        );
    }

    public function testIndex()
    {
        $order = null;
        if (!isset($order)) {
            $this->hotelMock->shouldReceive('pluck');
            $this->bookingMock->shouldReceive('paginateList');
        }
        $notification = Notification::factory()->make();
        $this->notificationMock->shouldReceive('getAllWithCondition')->andReturn($notification);
        $this->notificationMock->shouldReceive('update');
        $order = Booking::factory()->make();
        if (isset($order)) {
            $this->notificationMock->shouldReceive('getAllWithCondition');
        }
        $result = $this->orderController->index($order);
        $this->assertIsArray($result->getData());
        $this->assertEquals('cms.pages.partner.order.index', $result->getName());
    }

    public function testDetail()
    {
        $request = new Request();
        $this->bookingDetailMock->shouldReceive('getAllWithCondition');

        $result = $this->orderController->detail($request);
        $this->assertIsString($result);
    }

    public function testMarkAllAsRead()
    {
        $user = User::factory()->make();
        $user->id = 1;
        $this->be($user);
        $this->userMock->shouldReceive('markAllAsRead')->with($user);

        $result = $this->orderController->markAllAsRead();
        $this->assertEquals(url()->previous(), $result->getTargetUrl());
    }

    protected function tearDown(): void
    {
        m::close();
        unset($this->hotelMock);
        unset($this->bookingMock);
        unset($this->roomMock);
        unset($this->userMock);
        unset($this->bookingDetailMock);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
