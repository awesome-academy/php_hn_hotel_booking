<?php

namespace Tests\Unit\Http\Controllers;

use App\Http\Controllers\Customer\ProfileController;
use App\Repositories\Contracts\BookingRepositoryInterface;
use Illuminate\Http\Request;
use Tests\TestCase;
use Mockery as m;

class ProfileControllerTest extends TestCase
{
    protected $bookingMock;
    protected $profileController;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->bookingMock = m::mock(BookingRepositoryInterface::class);
        $this->profileController = new ProfileController(
            $this->bookingMock,
        );
    }

    public function testIndex()
    {
        $this->bookingMock->shouldReceive('getAllWithCondition');
        $result = $this->profileController->index();
        $data = $result->getData();
        $this->assertIsArray($data);
        $this->assertEquals('customer.pages.profile', $result->getName());
        $this->assertArrayHasKey('orders', $data);
    }

    public function testComment()
    {
        $id = 1;
        $result = $this->profileController->comment($id);
        $this->assertEquals('customer.pages.comment', $result->getName());
    }

    public function testPostComment()
    {
        $id = 1;
        $request = new Request();
        $this->bookingMock->shouldReceive('findOrFail');
        $this->bookingMock->shouldReceive('update');

        $result = $this->profileController->postComment($request, $id);
        $this->assertEquals(route('customer.profile'), $result->getTargetUrl());
    }

    protected function tearDown(): void
    {
        m::close();
        unset($this->bookingMock);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
