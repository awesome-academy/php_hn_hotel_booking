<?php

namespace Tests\Unit\Http\Controllers;

use App\Http\Controllers\BookingController;
use App\Models\Hotel;
use App\Models\Image;
use App\Models\Room;
use App\Repositories\Contracts\HotelRepositoryInterface;
use App\Repositories\Contracts\RoomRepositoryInterface;
use Illuminate\Support\Carbon;
use Tests\TestCase;
use Mockery as m;
use Illuminate\Foundation\Testing\WithFaker;

class BookingControllerTest extends TestCase
{
    use WithFaker;

    protected $hotelMock;
    protected $roomMock;
    protected $bookingController;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->hotelMock = m::mock(HotelRepositoryInterface::class);
        $this->roomMock = m::mock(RoomRepositoryInterface::class);
        $this->bookingController = new BookingController(
            $this->hotelMock,
            $this->roomMock,
        );
    }

    public function testIndex()
    {
        $hotel = Hotel::factory()->make();
        $this->hotelMock->shouldReceive('getAllWithCondition')->andReturn($hotel);
        $result = $this->bookingController->index();
        $data = $result->getData();
        $this->assertIsArray($data);
        $this->assertEquals('customer.pages.index', $result->getName());
        $this->assertArrayHasKey('hotels', $data);
    }

    public function testGetDetailHotel()
    {
        $hotel = Hotel::factory()->make();
        $hotel->id = 1;
        $image = Image::factory()->make();
        $image->imageable_id = 1;
        $image->imageable_type = 'App\Models\Hotel';
        $image->image = $this->faker->image;
        $hotel = $hotel->setRelation('images', [$image]);
        $room = Room::factory()->make([
            'hotel_id' => $hotel->id,
        ]);
        $hotel = $hotel->setRelation('rooms', [$room]);
        $this->hotelMock->shouldReceive('findOrFail')->andReturn($hotel);
        $carts = [
            1 =>[
                1 => [
                    'name' => 'Sun Asterisk',
                    'price' => 200,
                    'checkIn' => Carbon::now(),
                    'checkOut' => Carbon::now()->addDay(),
                    'qty' => 1,
                ]
            ]
        ];
        $this->withSession([
            'carts' => $carts,
        ]);

        $result = $this->bookingController->detailHotel($hotelId=1);
        $this->assertEquals('customer.pages.detail', $result->getName());
    }

    public function testDetailHotelWithoutCart()
    {
        $hotel = Hotel::factory()->make();
        $hotel->id = 1;
        $image = Image::factory()->make();
        $image->imageable_id = 1;
        $image->imageable_type = 'App\Models\Hotel';
        $image->image = $this->faker->image;
        $hotel = $hotel->setRelation('images', [$image]);
        $room = Room::factory()->make([
            'hotel_id' => $hotel->id,
        ]);
        $hotel = $hotel->setRelation('rooms', [$room]);
        $this->hotelMock->shouldReceive('findOrFail')->andReturn($hotel);
        $result = $this->bookingController->detailHotel($hotelId=1);
        $this->assertEquals('customer.pages.detail', $result->getName());
    }

    public function testGetTotal()
    {
        $hotelId = 1;
        $carts = [
            $hotelId =>[
                1 => [
                    'name' => 'Sun Asterisk',
                    'price' => 200,
                    'checkIn' => Carbon::now(),
                    'checkOut' => Carbon::now()->addDay(),
                    'qty' => 1,
                ]
            ]
        ];
        $this->withSession([
            'carts' => $carts,
        ]);
        $result = $this->bookingController->getTotal($hotelId);
        $this->assertEmpty($result);
    }

    public function testRoomDetail()
    {
        $this->roomMock->shouldReceive('findOrFail');
        $result = $this->bookingController->roomDetail($id = 1);
        $this->assertEquals('customer.pages.room-detail', $result->getName());
    }

    protected function tearDown(): void
    {
        m::close();
        unset($this->hotelMock);
        unset($this->roomMock);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
