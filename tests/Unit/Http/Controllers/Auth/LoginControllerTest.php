<?php

namespace Tests\Unit\Http\Controllers;

use App\Http\Controllers\Auth\LoginController;
use App\Http\Requests\LoginRequest;
use App\Models\User;
use App\Repositories\Contracts\UserRepositoryInterface;
use Tests\TestCase;
use Mockery as m;

class LoginControllerTest extends TestCase
{
    protected $userMock;
    protected $loginController;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->userMock = m::mock(UserRepositoryInterface::class);
        $this->loginController = new LoginController($this->userMock);
    }

    public function testLogin()
    {
        $result = $this->loginController->login();
        $this->assertEquals('cms.login', $result->getName());
    }

    public function testHandelLoginFailed()
    {
        $request = new LoginRequest();
        $this->userMock->shouldReceive('attempt')->andReturn(false);
        $result = $this->loginController->handelLogin($request);
        $this->assertEquals(route('auth.loginForm'), $result->getTargetUrl());
    }

    public function testHandelLoginAdmin()
    {
        $request = new LoginRequest();
        $user = User::factory()->make();
        $user->id = 1;
        $user->role = config('user.admin');
        $this->be($user);
        $this->userMock->shouldReceive('attempt')->andReturn(true);
        $result = $this->loginController->handelLogin($request);
        $this->assertEquals(route('admin.index'), $result->getTargetUrl());
    }

    public function testHandelLoginPartner()
    {
        $request = new LoginRequest();
        $user = User::factory()->make();
        $user->id = 1;
        $user->role = config('user.partner');
        $this->be($user);
        $this->userMock->shouldReceive('attempt')->andReturn(true);
        $result = $this->loginController->handelLogin($request);
        $this->assertEquals(route('partners.hotels.index'), $result->getTargetUrl());
    }

    public function testHandelLoginCustomerFailed()
    {
        $request = new LoginRequest();
        $this->userMock->shouldReceive('attempt')->andReturn(false);
        $result = $this->loginController->handelLoginCustomer($request);
        $this->assertEquals(route('auth.customer.loginForm'), $result->getTargetUrl());
    }

    public function testHandelLoginCustomer()
    {
        $request = new LoginRequest();
        $user = User::factory()->make();
        $user->id = 1;
        $user->role = config('user.customer');
        $this->be($user);
        $this->userMock->shouldReceive('attempt')->andReturn(true);
        $result = $this->loginController->handelLoginCustomer($request);
        $this->assertEquals(route('booking.index'), $result->getTargetUrl());
    }

    public function testLoginCustomer()
    {
        $result = $this->loginController->loginCustomer();
        $this->assertEquals('customer.pages.auth.login', $result->getName());
    }

    public function testLogout()
    {
        $result = $this->loginController->logOut();
        $this->assertEquals(route('auth.loginForm'), $result->getTargetUrl());
    }

    public function testLogoutCustomer()
    {
        $result = $this->loginController->logOutCustomer();
        $this->assertEquals(route('auth.customer.loginForm'), $result->getTargetUrl());
    }

    protected function tearDown(): void
    {
        m::close();
        unset($this->userMock);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
