<?php

namespace Tests\Unit\Http\Controllers;

use App\Http\Controllers\CartController;
use App\Models\Hotel;
use App\Models\Room;
use App\Models\Type;
use App\Repositories\Contracts\HotelRepositoryInterface;
use App\Repositories\Contracts\RoomRepositoryInterface;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;
use Tests\TestCase;
use Mockery as m;

class CartControllerTest extends TestCase
{
    protected $hotelMock;
    protected $roomMock;
    protected $cartController;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->hotelMock = m::mock(HotelRepositoryInterface::class);
        $this->roomMock = m::mock(RoomRepositoryInterface::class);
        $this->cartController = new CartController(
            $this->roomMock,
            $this->hotelMock,
        );
    }

    public function testAddEmptyCart()
    {
        $request = new Request();
        $request->hotelId = 2;
        $request->roomId = 2;
        $room = Room::factory()->make();
        $room->id = 1;
        $type = Type::factory()->make();
        $room->setRelation('type', $type);
        $this->withSession([
            'carts' => null,
        ]);
        $this->roomMock->shouldReceive('findOrFail')->andReturn($room);
        $hotel = Hotel::factory()->make();
        $this->hotelMock->shouldReceive('findOrFail')->andReturn($hotel);
        $result = $this->cartController->addToCart($request);
        $this->assertIsString($result);
    }

    public function testAddToExistHotel()
    {
        $request = new Request();
        $request->roomId = 1;
        $request->hotelId = 2;
        $room = Room::factory()->make();
        $room->id = 1;
        $type = Type::factory()->make();
        $room->setRelation('type', $type);
        $this->roomMock->shouldReceive('findOrFail')->andReturn($room);
        $carts = [
            1 =>[
                1 => [
                    'name' => 'Sun Asterisk',
                    'price' => 200,
                    'checkIn' => Carbon::now(),
                    'checkOut' => Carbon::now()->addDay(),
                    'qty' => 1,
                ]
            ]
        ];
        $this->withSession([
            'carts' => $carts,
        ]);
        $hotel = Hotel::factory()->make();
        $this->hotelMock->shouldReceive('findOrFail')->andReturn($hotel);

        $result = $this->cartController->addToCart($request);
        $this->assertIsString($result);
    }

    public function testAddOverLimitRoom()
    {
        $request = new Request();
        $request->roomId = 1;
        $request->hotelId = 1;
        $room = Room::factory()->make();
        $room->id = 1;
        $room->type_id = 1;
        $room->remaining = 1;
        $room = Room::factory()->make();
        $room->id = 1;
        $type = Type::factory()->make();
        $room->setRelation('type', $type);
        $this->roomMock->shouldReceive('findOrFail')->andReturn($room);
        $carts = [
            1 =>[
                1 => [
                    'name' => 'Sun Asterisk',
                    'price' => 200,
                    'checkIn' => Carbon::now(),
                    'checkOut' => Carbon::now()->addDay(),
                    'qty' => 2,
                ]
            ]
        ];
        $this->withSession([
            'carts' => $carts,
        ]);
        $hotel = Hotel::factory()->make();
        $this->hotelMock->shouldReceive('findOrFail')->andReturn($hotel);

        $result = $this->cartController->addToCart($request);
        $this->assertIsString($result);
    }

    public function testAddToExistHotelAndRoom()
    {
        $request = new Request();
        $request->roomId = 1;
        $request->hotelId = 1;
        $room = Room::factory()->make();
        $room->id = 1;
        $this->roomMock->shouldReceive('findOrFail')->andReturn($room);
        $carts = [
            1 =>[
                1 => [
                    'name' => 'Sun Asterisk',
                    'price' => 200,
                    'checkIn' => Carbon::now(),
                    'checkOut' => Carbon::now()->addDay(),
                    'qty' => 1,
                ]
            ]
        ];
        $this->withSession([
            'carts' => $carts,
        ]);
        $hotel = Hotel::factory()->make();
        $this->hotelMock->shouldReceive('findOrFail')->andReturn($hotel);

        $result = $this->cartController->addToCart($request);
        $this->assertIsString($result);
    }

    public function testRemoveRoomNotFoundRoomId()
    {
        $request = new Request();
        $request->roomId = 1;
        $request->hotelId = 1;
        $room = Room::factory()->make();
        $this->roomMock->shouldReceive('findOrFail')->andReturn($room);
        $carts = [
            1 =>[
                2 => [
                    'name' => 'Sun Asterisk',
                    'price' => 200,
                    'checkIn' => Carbon::now(),
                    'checkOut' => Carbon::now()->addDay(),
                    'qty' => 1,
                ]
            ]
        ];
        $this->withSession([
            'carts' => $carts,
        ]);
        $result = $this->cartController->removeRoom($request);
        $this->assertEmpty($result);
    }

    public function testRemoveRoom()
    {
        $request = new Request();
        $request->roomId = 1;
        $request->hotelId = 1;
        $room = Room::factory()->make();
        $this->roomMock->shouldReceive('findOrFail')->andReturn($room);
        $carts = [
            1 =>[
                1 => [
                    'name' => 'Sun Asterisk',
                    'price' => 200,
                    'checkIn' => Carbon::now(),
                    'checkOut' => Carbon::now()->addDay(),
                    'qty' => 1,
                ]
            ]
        ];
        $this->withSession([
            'carts' => $carts,
        ]);
        $result = $this->cartController->removeRoom($request);
        $this->assertIsString($result);
    }

    public function testSubRoom()
    {
        $request = new Request();
        $request->roomId = 1;
        $request->hotelId = 1;
        $room = Room::factory()->make();
        $this->roomMock->shouldReceive('findOrFail')->andReturn($room);
        $carts = [
            1 =>[
                1 => [
                    'name' => 'Sun Asterisk',
                    'price' => 200,
                    'checkIn' => Carbon::now(),
                    'checkOut' => Carbon::now()->addDay(),
                    'qty' => 1,
                ]
            ]
        ];
        $this->withSession([
            'carts' => $carts,
        ]);
        $result = $this->cartController->subRoom($request);
        $this->assertIsString($result);
    }

    public function testSubRoomGreaterThanOne()
    {
        $request = new Request();
        $request->roomId = 1;
        $request->hotelId = 1;
        $room = Room::factory()->make();
        $this->roomMock->shouldReceive('findOrFail')->andReturn($room);
        $carts = [
            1 =>[
                1 => [
                    'name' => 'Sun Asterisk',
                    'price' => 200,
                    'checkIn' => Carbon::now(),
                    'checkOut' => Carbon::now()->addDay(),
                    'qty' => 3,
                ]
            ]
        ];
        $this->withSession([
            'carts' => $carts,
        ]);
        $hotel = Hotel::factory()->make();
        $this->hotelMock->shouldReceive('findOrFail')->andReturn($hotel);
        $result = $this->cartController->subRoom($request);
        $this->assertIsString($result);
    }

    protected function tearDown(): void
    {
        m::close();
        unset($this->hotelMock);
        unset($this->roomMock);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
