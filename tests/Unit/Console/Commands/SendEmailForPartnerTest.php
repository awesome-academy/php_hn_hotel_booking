<?php

namespace Tests\Unit\Http\Controllers;

use App\Jobs\SendEmailJob;
use App\Models\User;
use App\Repositories\Contracts\BookingRepositoryInterface;
use App\Repositories\Contracts\UserRepositoryInterface;
use Illuminate\Support\Facades\Queue;
use Tests\TestCase;
use Mockery as m;

class SendEmailForPartnerTest extends TestCase
{
    protected $userMock;
    protected $bookingMock;
    protected $sendEmailForPartner;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->userMock = m::mock(UserRepositoryInterface::class);
        $this->bookingMock = m::mock(BookingRepositoryInterface::class);
        $this->sendEmailForPartner = new \App\Console\Commands\SendEmailForPartner(
            $this->userMock,
            $this->bookingMock
        );
    }

    public function testHandle()
    {
        $users = User::factory(2)->make();
        $this->userMock->shouldReceive('getAllWithCondition')->andReturn($users);
        $data['name'] = 'trung';
        $data['revenues'] = 500;
        $data['orders'] = 20;
        $data['orderDetail'] = [
            1 => [
                'total' => 500,
                'status' => 'Pending',
                'customer' => 'trung hoafng',
                'email' => 'hoangtrunga1k55@gmail.com',
                'phone' => '0825803982',
                'hotel_id' => 1,
                'created_at' => '20-Jun-2021 08:06:05',
            ]
        ];

        $this->bookingMock->shouldReceive('getInfoOrderWeekly')->andReturn($data);
        Queue::fake();
        $this->sendEmailForPartner->handle();
        Queue::assertPushed(SendEmailJob::class);
    }

    protected function tearDown(): void
    {
        m::close();
        unset($this->userMock);
        unset($this->bookingMock);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
